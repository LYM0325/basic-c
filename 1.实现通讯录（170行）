/*
通讯录
能存放1000个人的信息
每个人的信息：名字+年龄+性别+电话+住址
实现的功能：增加人的信息
			删除指定人的信息
			修改指定人的信息
			查找指定人的信息
			排序通讯录的信息
*/
#include<stdio.h>
#include<string.h>
#define MAX_NAME 20
#define MAX_SEX 10
#define MAX_TELE 12
#define MAX_ADDR 30
#define MAX 100
enum Option {
    EXIT,
    ADD,
    DEL,
    SEARCH,
    MODIFY,
    SORT,
    PRINT
};
typedef struct PeoInfo {
	char name[MAX_NAME];
	char sex[MAX_SEX];
	int age;
	char tele[MAX_TELE];
	char addr[MAX_TELE];
} PeoInfo;//typedef进行重命名
typedef struct Contact {
	PeoInfo datd[MAX];
	int size;
} Contact;
void menu() {
	printf("*******************************\n");
	printf("******  1.add     2.del  ******\n");
	printf("******  3.search  4.modify*****\n");
	printf("********5.sort    6.print *****\n");
	printf("********     0.exit       *****\n");
	printf("*******************************\n");
}
void InitContact(Contact* pc) {
	pc->size = 0;
	memset(pc->datd,0,sizeof(pc->datd));
}
void AddContact(Contact* pc) {
	if(pc->size == MAX) {
		printf("通讯录已满，无法添加");
		return;
	}
	printf("请输入名字：");
	scanf("%s",pc->datd[pc->size].name);
	printf("请输入年龄：");
	scanf("%d",&(pc->datd[pc->size].age));
	printf("请输入性别：");
	scanf("%s",pc->datd[pc->size].sex);
	printf("请输入电话：");
	scanf("%s",pc->datd[pc->size].tele);
	printf("请输入地址：");
	scanf("%s",pc->datd[pc->size].addr);
	pc->size++;
	printf("添加成功\n");
}
void PrintContact(const Contact* pc) {
	int i = 0;
	printf("%-20s\t%-5s\t%-5s\t%-12s\t%-20s\n","名字","年龄","性别","电话","住址");
	for(i = 0; i < pc->size; i++) {
		printf("%-20s\t%-5d\t%-5s\t%-12s\t%-20s\n",pc->datd[i].name,pc->datd[i].age,pc->datd[i].sex,pc->datd[i].tele,pc->datd[i].addr);
	}
}
static int FindByName(Contact* pc,char name[]) {
	int i = 0;
	for(i = 0; i<pc->size; i++) {
		if(strcmp(pc->datd[i].name,name) == 0) {
			return i;
		}
	}
	return -1;
}
void DelContact(Contact* pc) {
	char name[MAX_NAME] = {0};
	if(pc->size == 0) {
		printf("通讯录为空");
		return ;
	}
	printf("请输入要查找人的名字：");
	scanf("%s",&name);
	int ret = FindByName(pc,name);
	if(ret == -1) {
		printf("未找到指定联系人,请重新选择\n");
		return;
	}
	int i = 0;
	for(i = ret ; i<pc->size-1; i++) {
		pc->datd[i] = pc->datd[i+1];
	}
	pc->size--;
	printf("删除成功\n");
}
void SearchContact(Contact*pc) {
	char name[MAX_NAME] = {0};
	printf("请输入要查找联系人的名字：");
	scanf("%s",&name);
	int ret = FindByName(pc,name);
	if(ret == -1) {
		printf("未找到指定联系人\n");
		return;
	} else {
		printf("%-20s\t%-5s\t%-5s\t%-12s\t%-20s\n","名字","年龄","性别","电话","住址");
		printf("%-20s\t%-5d\t%-5s\t%-12s\t%-20s\n",pc->datd[ret].name,pc->datd[ret].age,pc->datd[ret].sex,pc->datd[ret].tele,pc->datd[ret].addr);
	}
}
void ModifyContact(Contact* pc) {
	char name[MAX_NAME] = {0};
	printf("请输入要修改联系人的名字：");
	scanf("%s",&name);
	int ret = FindByName(pc,name);
	if(ret == -1) {
		printf("修改的人不存在\n");
		return;
	} else {
		printf("请输入修改后的名字：");
		scanf("%s",pc->datd[ret].name);
		printf("请输入修改后的年龄：");
		scanf("%d",&(pc->datd[ret].age));
		printf("请输入修改后的性别：");
		scanf("%s",pc->datd[ret].sex);
		printf("请输入修改后的电话：");
		scanf("%s",pc->datd[ret].tele);
		printf("请输入修改后的地址：");
		scanf("%s",pc->datd[ret].addr);
	}
	printf("修改成功\n");
}
int main() {
	int input = 0;
	Contact con;
	InitContact(&con);
	do {
		menu();
		printf("请选择：");
		scanf("%d",&input);
		switch(input) {
			case ADD:
				AddContact(&con);
				break;
			case DEL:
				DelContact(&con);
				break;
			case SEARCH:
				SearchContact(&con);
				break;
			case MODIFY:
				ModifyContact(&con);
				break;
			case SORT:
				break;
			case PRINT:
				PrintContact(&con);
				break;
			case EXIT:
				printf("退出通讯录"); 
				break;
			default:
				printf("输入有误，请重新输入：\n");
				break;
		}
	} while(input);
	return 0;
}
